<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentCache</name>
    </assembly>
    <members>
        <member name="T:FluentCache.BulkCacheStrategy`2">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="T:FluentCache.BulkCacheStrategyIncomplete`2">
            <summary>
            An incomplete strategy to access or modify a batch of strongly-typed data in a Cache
            </summary>
        </member>
        <member name="T:FluentCache.CacheStrategy">
            <summary>
            A strategy to access or update data in a cache
            </summary>
        </member>
        <member name="P:FluentCache.CacheStrategy.Region">
            <summary>
            Gets the Region that this caching policy will use when caching items
            </summary>
        </member>
        <member name="P:FluentCache.CacheStrategy.Key">
            <summary>
            Gets the Key that this caching policy will using when caching items
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.WithParameters(System.Object[])">
            <summary>
            Updates the cache strategy to include parameters
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.RetrieveUsing(System.Func{System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            Updates the cache strategy to use the specified method to retrieve missing or invalid items in the batch
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.RetrieveUsingAsync(System.Func{System.Collections.Generic.ICollection{`0},System.Threading.Tasks.Task{System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}}})">
            <summary>
            Updates the cache strategy to use the specified async method to retrieve missing or invalid items in the batch
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.ClearValues">
            <summary>
            Clears all values in the batch
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.SetValue(`0,`1)">
            <summary>
            Sets the specified value in the cache
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyIncomplete`2.SetValues(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Sets the specified values in the cache
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategy`2.Validate(System.Func{FluentCache.ICachedValue{`1},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategy`2.InvalidateIf(System.Func{FluentCache.ICachedValue{`1},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategy`2.GetAll">
            <summary>
            Gets all cached items
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategy`2.GetAllValues">
            <summary>
            Gets all cached values
            </summary>
        </member>
        <member name="T:FluentCache.BulkCacheStrategyAsync`2">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.ValidateAsync(System.Func{FluentCache.ICachedValue{`1},System.Threading.Tasks.Task{FluentCache.CacheValidationResult}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.InvalidateIfAsync(System.Func{FluentCache.ICachedValue{`1},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns false
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.Validate(System.Func{FluentCache.ICachedValue{`1},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.InvalidateIf(System.Func{FluentCache.ICachedValue{`1},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.GetAllAsync">
            <summary>
            Asynchronously gets all cached results
            </summary>
        </member>
        <member name="M:FluentCache.BulkCacheStrategyAsync`2.GetAllValuesAsync">
            <summary>
            Asynchronously gets all cached values
            </summary>
        </member>
        <member name="T:FluentCache.CacheOperation">
            <summary>
            Defines a list of caching operations
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Get">
            <summary>
            Getting a value from the cache
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Set">
            <summary>
            Setting a value in the cache
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Remove">
            <summary>
            Removing a value from the cache
            </summary>
        </member>
        <member name="T:FluentCache.CacheStrategyAsync`1">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FluentCache.SingleValueCacheStrategy">
            <summary>
            A strategy to access or update a single value in a cache
            </summary>
        </member>
        <member name="M:FluentCache.SingleValueCacheStrategy.ClearValue">
            <summary>
            Clears the value associated with this caching strategy from the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.GetAsync">
            <summary>
            Asynchronously gets the cached value wrapper from the cache
            </summary>
            <returns>A task containing the cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.InvalidateIf(System.Func{FluentCache.ICachedValue{`0},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.InvalidateIfAsync(System.Func{FluentCache.ICachedValue{`0},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns false
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.ValidateAsync(System.Func{FluentCache.ICachedValue{`0},System.Threading.Tasks.Task{FluentCache.CacheValidationResult}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.Validate(System.Func{FluentCache.ICachedValue{`0},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.RetrieveUsingAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.IfRetrievalFails(System.Func{System.Exception,FluentCache.ICachedValue{`0},FluentCache.RetrievalErrorHandlerResult{`0}})">
            <summary>
            Specifies an error handling strategy if retrieval fails
            </summary>
            <param name="errorHandler">An error handler that takes the exception and previous cached value (if it exists) and returns the fallback value</param>
            <returns>An updated cache strategy that includes the retrieval error handler strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.GetValueAsync">
            <summary>
            Asynchronously gets the cached value
            </summary>
            <returns>A task containing the cached value</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyAsync`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="T:FluentCache.CachingFailedCachedValue">
            <summary>
            Represents a cached value that was generated from a failed caching operation
            </summary>
        </member>
        <member name="M:FluentCache.CachingFailedCachedValue.Create``1(``0)">
            <summary>
            Creates a new ICachedValue wrapper around the specified value
            </summary>
        </member>
        <member name="T:FluentCache.ICachedValue`1">
            <summary>
            A strongly typed value that has been retrieved from a cache
            </summary>
            <typeparam name="T">The type of the vaue that is to be retrieved</typeparam>
        </member>
        <member name="T:FluentCache.ICachedValue">
            <summary>
            A value that has been retrieved from a cache
            </summary>
        </member>
        <member name="P:FluentCache.ICachedValue.CachedDate">
            <summary>
            Gets the date the value was first cached
            </summary>
        </member>
        <member name="P:FluentCache.ICachedValue.LastValidatedDate">
            <summary>
            Gets the date the cached value was last validated, or null if it has not been validated
            </summary>
        </member>
        <member name="P:FluentCache.ICachedValue.Value">
            <summary>
            Gets the cached value
            </summary>
        </member>
        <member name="P:FluentCache.ICachedValue`1.Value">
            <summary>
            Gets the cached value
            </summary>
        </member>
        <member name="T:FluentCache.DefaultParameterCacheKeyProvider">
            <summary>
            DefaultParameterCacheKeyProvider provides a simple and standard mechanism for generating parameter cache key values
            </summary>
        </member>
        <member name="T:FluentCache.IParameterCacheKeyProvider">
            <summary>
            Defines how cache strategies should generate caching keys for parameter values
            </summary>
        </member>
        <member name="M:FluentCache.IParameterCacheKeyProvider.GenerateParameterCacheKey(System.Object)">
            <summary>
            Generate a cache key for the specified parameter
            </summary>
            <returns>a string representation of the parameter that is used in generating a unique cache key for a cache strategy</returns>
        </member>
        <member name="M:FluentCache.DefaultParameterCacheKeyProvider.GenerateParameterCacheKey(System.Object)">
            <summary>
            Generates a cache key value for the specified parameter by using parameter.ToString()
            </summary>
        </member>
        <member name="T:FluentCache.Expressions.InvalidCachingExpressionException">
            <summary>
            An exception that is thrown when the fluent caching API is unable to parse the provided expression
            </summary>
        </member>
        <member name="T:FluentCache.FluentCacheException">
            <summary>
            The base for exceptions thrown by the FluentCache APIs
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor(System.String)">
            <summary>
            Constructs a new instance with the specified message
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance with the specified message and inner exception
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor(System.String)">
            <summary>
            Constructs a new instance with the specified message
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance with the specified message and inner exception
            </summary>
        </member>
        <member name="T:FluentCache.ICachedValueWithVersion">
            <summary>
            A value that has been retrieved from a cache that also includes an auto-incrementing version
            </summary>
        </member>
        <member name="P:FluentCache.ICachedValueWithVersion.Version">
            <summary>
            Returns an auto-incrementing sequence value indicating which version of the cached value is returned
            </summary>
        </member>
        <member name="T:FluentCache.ICachedValueWithVersion`1">
            <summary>
            A strongly-typed value that has been retrieved from a cache that also includes an auto-incrementing version
            </summary>
        </member>
        <member name="T:FluentCache.IUpdateLastValidatedDate">
            <summary>
            Allows a caching implementation to update the last validated date of a cached value. This is an internal interface not intended for direct public consumption
            </summary>
        </member>
        <member name="M:FluentCache.IUpdateLastValidatedDate.MarkAsValidated(FluentCache.ICachedValue,System.DateTime)">
            <summary>
            Mark the specified cached value as updated
            </summary>
        </member>
        <member name="T:FluentCache.RetrievalErrorHandlerResult`1">
            <summary>
            Defines the result of a retrieval error handler
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FluentCache.RetrievalErrorHandlerResult`1.UsePreviousCachedValue(System.Exception,FluentCache.ICachedValue{`0})">
            <summary>
            A simple retrieval error handler that uses the previous cached value, if it exists
            </summary>
        </member>
        <member name="M:FluentCache.RetrievalErrorHandlerResult`1.UsePreviousCachedValueOrDefault(System.Exception,FluentCache.ICachedValue{`0},`0)">
            <summary>
            A simple retrieval error handler that uses the previous cached value if it exists, otherwise uses a default value
            </summary>
        </member>
        <member name="P:FluentCache.RetrievalErrorHandlerResult`1.IsErrorHandled">
            <summary>
            Indicates whether the retrieval error was handled
            </summary>
        </member>
        <member name="P:FluentCache.RetrievalErrorHandlerResult`1.FallbackResult">
            <summary>
            Specifies the fallback value that should be used
            </summary>
        </member>
        <member name="T:FluentCache.CacheStrategyParameterized`1">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="T:FluentCache.CacheStrategyIncomplete">
            <summary>
            An incomplete strategy to access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.Retrieve``1(System.Func{``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.RetrieveUsing``1(System.Func{``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.RetrieveUsingAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.Get``1">
            <summary>
            Gets the cached value wrapper from the cache
            </summary>
            <returns>The cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.GetValue``1">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.WithParameters``1(``0)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.WithParameters``2(``0,``1)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.WithParameters``3(``0,``1,``2)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.WithParameters``4(``0,``1,``2,``3)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyIncomplete.WithParameters(System.Object[])">
            <summary>
            Updates the cache strategy to include parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`1.RetrieveUsing``1(System.Func{`0,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`1.RetrieveUsingAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.CacheStrategyParameterized`2">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`2.Retrieve``1(System.Func{`0,`1,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`2.RetrieveAsync``1(System.Func{`0,`1,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.CacheStrategyParameterized`3">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`3.RetrieveUsing``1(System.Func{`0,`1,`2,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`3.RetrieveUsingAsync``1(System.Func{`0,`1,`2,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.CacheStrategyParameterized`4">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`4.RetrieveUsing``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategyParameterized`4.RetrieveUsingAsync``1(System.Func{`0,`1,`2,`3,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.CacheStrategy`1">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache
            </summary>
            <typeparam name="T">The type of the data in the Cache</typeparam>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.Get">
            <summary>
            Gets the cached value wrapper from the cache
            </summary>
            <returns>The cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.InvalidateIf(System.Func{FluentCache.ICachedValue{`0},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.Validate(System.Func{FluentCache.ICachedValue{`0},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.RetrieveUsing(System.Func{`0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.IfRetrievalFails(System.Func{System.Exception,FluentCache.ICachedValue{`0},FluentCache.RetrievalErrorHandlerResult{`0}})">
            <summary>
            Specifies an error handling strategy if retrieval fails
            </summary>
            <param name="errorHandler">An error handler that takes the exception and previous cached value (if it exists) and returns the fallback value</param>
            <returns>An updated cache strategy that includes the retrieval error handler strategy</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.CacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="T:FluentCache.CachePolicy">
            <summary>
            Defines a policy for how values should be cached
            </summary>
        </member>
        <member name="M:FluentCache.CachePolicy.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            Creates a cache policy with the specified sliding expiration and expiration date
            </summary>
        </member>
        <member name="M:FluentCache.CachePolicy.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a cache policy with the specified sliding expiration
            </summary>
        </member>
        <member name="M:FluentCache.CachePolicy.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Creates a cache policy with the specified expiration date
            </summary>
        </member>
        <member name="M:FluentCache.CachePolicy.ExpireAfter(System.TimeSpan)">
            <summary>
            Returns a new caching policy with the specified sliding expiration period
            </summary>
        </member>
        <member name="M:FluentCache.CachePolicy.ExpireOn(System.DateTime)">
            <summary>
            Returns a new cache policy with the specified expiration date
            </summary>
        </member>
        <member name="P:FluentCache.CachePolicy.SlidingExpiration">
            <summary>
            Gets the sliding expiration duration for a cached item
            </summary>
        </member>
        <member name="P:FluentCache.CachePolicy.ExpirationDate">
            <summary>
            Gets the absolute expiration date for a cached item
            </summary>
        </member>
        <member name="T:FluentCache.CacheExtensions">
            <summary>
            Fluent Cache Extensions
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.GetValue``1(FluentCache.ICache,System.String,System.String)">
            <summary>
            Gets the specified value from a cache, or the default value if no matching item was found in the cache
            </summary>
            <typeparam name="T">The cached item type</typeparam>
            <param name="source">the cache</param>
            <param name="key">the key of the cached item</param>
            <param name="region">the region for the cache</param>
            <returns>The cached value, or default(T) if the item is not in the cache</returns>
        </member>
        <member name="M:FluentCache.CacheExtensions.ThisMethod(FluentCache.ICache,System.String)">
            <summary>
            Returns a caching strategy for the calling method. The method name will be used in the cache key
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ThisMethod``1(FluentCache.ICache{``0},System.String)">
            <summary>
            Returns a caching strategy for the calling method. The method name and source type will be used in the cache key
            </summary>
            <typeparam name="TSource">The type of the caching source</typeparam>
            <param name="source">The caching source</param>
            <param name="method">The name of the method that will be cached</param>
            <returns></returns>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithSource``1(FluentCache.ICache,``0)">
            <summary>
            Returns a cache wrapper that can support caching strategies for member expressions
            ex: cache.WithSource(this).Method(t => t.MyMethod())
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithKey(FluentCache.ICache,System.String)">
            <summary>
            Returns a caching strategy with the specified key
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithRegion``1(``0,System.String)">
            <summary>
            Updates a caching strategy to use the specified region
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ExpireOn``1(``0,System.DateTime)">
            <summary>
            Updates a caching strategy to use the specified absolute expiration date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ExpireAfter``1(``0,System.TimeSpan)">
            <summary>
            Updates a caching strategy to use the specified sliding absolute expiration date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``1(FluentCache.CacheStrategy{``0},System.DateTime)">
            <summary>
            Validates the item was cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``1(FluentCache.CacheStrategyAsync{``0},System.DateTime)">
            <summary>
            Validates the item was cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``2(FluentCache.BulkCacheStrategy{``0,``1},System.DateTime)">
            <summary>
            Validates all cached items were cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``2(FluentCache.BulkCacheStrategyAsync{``0,``1},System.DateTime)">
            <summary>
            Validates all cached items were cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValue``1(FluentCache.CacheStrategy{``0})">
            <summary>
            Use the previous cached value if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValueOrDefault``1(FluentCache.CacheStrategy{``0},``0)">
            <summary>
            Use the previous cached value (or a default value if there is no previous value) if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValue``1(FluentCache.CacheStrategyAsync{``0})">
            <summary>
            Use the previous cached value if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValueOrDefault``1(FluentCache.CacheStrategyAsync{``0},``0)">
            <summary>
            Use the previous cached value (or a default value if there is no previous value) if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``2(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Result``2(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``2(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Returns an async caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism if the item is not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Result``2(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Returns an async caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism if the item is not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``3(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}})">
            <summary>
            Returns a caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Results``3(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}})">
            <summary>
            Returns a caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``3(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}}})">
            <summary>
            Returns an async caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Results``3(FluentCache.ICache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}}})">
            <summary>
            Returns an async caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="T:FluentCache.CacheValidationResult">
            <summary>
            Defines possible outcomes when determining whether or not a cached value is still valid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Valid">
            <summary>
            The cached value was determined to still be valid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Invalid">
            <summary>
            The cached value was determined to be invalid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Unknown">
            <summary>
            The cached value was not validated and it is unknown whether or not the value is valid or invalid
            </summary>
        </member>
        <member name="T:FluentCache.ICache`1">
            <summary>
            A strongly-typed caching source. This is an internal interface designed for use with extension methods
            </summary>
            <typeparam name="TSource">The type of the caching source</typeparam>
        </member>
        <member name="T:FluentCache.ICache">
            <summary>
            Provides methods for consumers to cache and retrieve data
            </summary>
        </member>
        <member name="M:FluentCache.ICache.Get(System.String,System.String)">
            <summary>
            Gets a value from the cache
            </summary>
            <param name="key">A key identifying the value that is to be retrieved</param>
            <param name="region">A region used to group related data elements</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.ICache.Get``1(System.String,System.String)">
            <summary>
            Gets a value from the cache
            </summary>
            <param name="key">A key identifying the value that is to be retrieved</param>
            <param name="region">A region used to group related data elements</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.ICache.Set(System.String,System.String,System.Object,FluentCache.CachePolicy)">
            <summary>
            Sets a value in the cache
            </summary>
            <param name="key">A key identifying the value that is to be retrieved</param>
            <param name="region">A region used to group related data elements</param>
            <param name="value">The value to cache</param>
            <param name="cachePolicy">A policy that specifies how the value should be cached</param>
            <returns></returns>
        </member>
        <member name="M:FluentCache.ICache.Set``1(System.String,System.String,``0,FluentCache.CachePolicy)">
            <summary>
            Sets a value in the cache
            </summary>
            <param name="key">A key identifying the value that is to be retrieved</param>
            <param name="region">A region used to group related data elements</param>
            <param name="value">The value to cache</param>
            <param name="cachePolicy">A policy that specifies how the value should be cached</param>
            <returns></returns>
        </member>
        <member name="M:FluentCache.ICache.Remove(System.String,System.String)">
            <summary>
            Removes a value from the cache
            </summary>
            <param name="key">A key identifying the value that is to be retrieved</param>
            <param name="region">A region used to group related data elements</param>
        </member>
        <member name="M:FluentCache.ICache.TryHandleCachingFailure(FluentCache.FluentCacheException,FluentCache.CacheOperation)">
            <summary>
            Attempts to handle an error while attempting to get, set, or remove an item from the cache.
            Returning true indicates that the exception is handled, false indicates the exception is unhandled and should be re-thrown
            </summary>
            <param name="exception">The exception that was encountered</param>
            <param name="cacheOperation">The operation where the failure occured</param>
            <returns>True to indicate the exception has been handled, false to indicate the exception is unhandled and should be re-thrown</returns>
        </member>
        <member name="P:FluentCache.ICache.ParameterCacheKeyProvider">
            <summary>
            Determines how cache keys should be generated for parameter values
            </summary>
        </member>
        <member name="P:FluentCache.ICache`1.Source">
            <summary>
            Gets the object whose calls will be cached. typeof(TSource).Name will be used as the default region
            </summary>
        </member>
        <member name="T:FluentCache.MethodCacheStrategy`1">
            <summary>
            Defines a caching strategy for a particular method
            </summary>
        </member>
        <member name="M:FluentCache.MethodCacheStrategy`1.RetrieveUsingMethod">
            <summary>
            Indicates that the method used to create the caching strategy should also be used to retrieve the value if it is missing or invalid
            </summary>
            <returns>A caching strategy that can be used to access the value</returns>
        </member>
        <member name="M:FluentCache.MethodCacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="M:FluentCache.MethodCacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="T:FluentCache.AsyncMethodCacheStrategy`1">
            <summary>
            Defines an asynchronous caching strategy for a particular method
            </summary>
        </member>
        <member name="M:FluentCache.AsyncMethodCacheStrategy`1.RetrieveUsingMethod">
            <summary>
            Indicates that the method used to create the caching strategy should also be used to retrieve the value if it is missing or invalid
            </summary>
            <returns>A caching strategy that can be used to access the value</returns>
        </member>
        <member name="M:FluentCache.AsyncMethodCacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="M:FluentCache.AsyncMethodCacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="T:FluentCache.Parameter">
            <summary>
            Methods to configure how the fluent caching API handles parameters
            </summary>
        </member>
        <member name="M:FluentCache.Parameter.DoNotCache``1">
            <summary>
            Informs the fluent caching API that the specified parameter should not be included when determining the cache key
            </summary>
        </member>
        <member name="M:FluentCache.Parameter.DoNotCache``1(``0)">
            <summary>
            Informs the fluent caching API that the specified parameter should not be included when determining the cache key. Use the value parameter if a value is needed for data retrieval
            </summary>
        </member>
    </members>
</doc>
