<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\FluentCache\bin\Debug\FluentCache.dll" #>
<#@ assembly name="$(SolutionDir)\FluentCache.Test\bin\Debug\FluentCache.Test.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="FluentCache" #>
<#@ import namespace="FluentCache.Test" #>
<#@ output extension=".cs" #>
<#

	var cacheInfos = new List<string>
                         {
							"DictionaryCache",
							"MemoryCache",
							"RedisCache"
                         };

    Type cacheTesterType = typeof(CacheTester);
    var methods = cacheTesterType.GetMethods()
                                 .Where(m => m.ReturnType == typeof(void)
                                          || m.ReturnType == typeof(Task))
                                .Where(m => !m.GetParameters().Any())
                                 .ToList();
#>
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

//******************************************************************
//*** THIS FILE HAS BEEN AUTO-GENERATED. DO NOT EDIT IT MANUALLY ***
//******************************************************************

namespace FluentCache.Test
{
	<# foreach (var cacheInfo in cacheInfos)
	{
		string cacheTypeName = cacheInfo;
		string methodName;
		bool isAsync; #>

	[TestClass]
    public partial class <#= cacheTypeName #>Tests
    {
		<# foreach (var method in methods)
			{
			    methodName = method.Name;
				isAsync = method.ReturnType == typeof(Task); #>

		[TestMethod]
		public <#= isAsync? "async Task" : "void" #> <#= cacheTypeName #>_<#= methodName #>()
		{
			CacheTester tester = new CacheTester(CreateCache);
			
			//Unit test for <#= methodName #>
			<#= isAsync? "await " : "" #>tester.<#= methodName #>();
		}
		<# } #>
	}
	<# } #>

	//Test Helpers & Initializers
	public partial class MemoryCacheTests 
	{
		private static Cache CreateCache()
		{
			var memoryCache = new System.Runtime.Caching.MemoryCache(Guid.NewGuid().ToString());
			return new FluentCache.RuntimeCaching.FluentMemoryCache(memoryCache);
		}
	}

	public partial class DictionaryCacheTests
	{
		private static Cache CreateCache()
		{
			return new FluentCache.Simple.FluentDictionaryCache();
		}
	}

	public partial class RedisCacheTests
	{
        private static StackExchange.Redis.ConnectionMultiplexer Redis;

        [ClassInitialize]
        public static void InitializeRedis(TestContext context)
        {
            var config = StackExchange.Redis.ConfigurationOptions.Parse("localhost");
            config.AllowAdmin = true;

            Redis = StackExchange.Redis.ConnectionMultiplexer.Connect(config);

        }

        [TestInitialize]
        public void TestInitialize()
        {
            var endpoint = Redis.GetEndPoints().Single();
            Redis.GetServer(endpoint).FlushAllDatabases();
        }

		private static Cache CreateCache()
		{
			return new FluentCache.Redis.FluentRedisCache(Redis);
		}

	}

}