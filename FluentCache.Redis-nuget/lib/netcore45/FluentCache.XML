<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentCache</name>
    </assembly>
    <members>
        <member name="T:FluentCache.CachedValue`1">
            <summary>
            Defines a cached value
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:FluentCache.CachedValue`1.CachedDate">
            <summary>
            Gets the date the value was first cached
            </summary>
        </member>
        <member name="P:FluentCache.CachedValue`1.LastValidatedDate">
            <summary>
            Gets the date the cached value was last validated, or null if it has not been validated
            </summary>
        </member>
        <member name="P:FluentCache.CachedValue`1.Version">
            <summary>
            Gets the version of this cached value
            </summary>
        </member>
        <member name="P:FluentCache.CachedValue`1.Value">
            <summary>
            Gets the cached value
            </summary>
        </member>
        <member name="T:FluentCache.CacheExpiration">
            <summary>
            Defines a policy for how values should be expired
            </summary>
        </member>
        <member name="M:FluentCache.CacheExpiration.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a cache policy with the specified sliding expiration
            </summary>
        </member>
        <member name="M:FluentCache.CacheExpiration.ExpireAfter(System.TimeSpan)">
            <summary>
            Returns a new caching policy with the specified sliding expiration period
            </summary>
        </member>
        <member name="P:FluentCache.CacheExpiration.SlidingExpiration">
            <summary>
            Gets the sliding expiration duration for a cached item
            </summary>
        </member>
        <member name="T:FluentCache.ICacheStrategyAsync`1">
            <summary>
            Specifies a caching strategy to retrieve cached values asynchronously
            </summary>
        </member>
        <member name="T:FluentCache.ICacheStrategy`1">
            <summary>
            Specifies a caching strategy that is used by a Cache
            </summary>
        </member>
        <member name="M:FluentCache.ICacheStrategy`1.Validate(FluentCache.CachedValue{`0})">
            <summary>
            Validates an existing cached value
            </summary>
        </member>
        <member name="M:FluentCache.ICacheStrategy`1.Retrieve(FluentCache.CachedValue{`0})">
            <summary>
            Retrieves a cached value
            </summary>
        </member>
        <member name="P:FluentCache.ICacheStrategy`1.Key">
            <summary>
            Gets the key of this cached value. Should be unique in combination with Region
            </summary>
        </member>
        <member name="P:FluentCache.ICacheStrategy`1.Region">
            <summary>
            Gets the cache region. Should be unique in combination with Key
            </summary>
        </member>
        <member name="P:FluentCache.ICacheStrategy`1.Expiration">
            <summary>
            Gets the expiration policy
            </summary>
        </member>
        <member name="M:FluentCache.ICacheStrategyAsync`1.RetrieveAsync(FluentCache.CachedValue{`0})">
            <summary>
            Retrieves the cached value asynchronously
            </summary>
        </member>
        <member name="M:FluentCache.ICacheStrategyAsync`1.ValidateAsync(FluentCache.CachedValue{`0})">
            <summary>
            Validates the cached value asynchronously
            </summary>
        </member>
        <member name="T:FluentCache.CacheExecutionPlan`1">
            <summary>
            Defines an execution plan for getting a value from a cache, validating, and retrieving a new value
            </summary>
            <typeparam name="T">The type of value that is cached</typeparam>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.#ctor(FluentCache.Cache,FluentCache.ICacheStrategy{`0})">
            <summary>
            Constructs a new instance of the execution plan
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.TryHandleCachingFailure(FluentCache.FluentCacheException)">
            <summary>
            Attempts to handle a failure that occured during caching. Return true to indicate that the error was handled and false to indicate the error is unhandled and needs to be propogated further
            </summary>
            <param name="cacheException">The exception that occurred during caching</param>
            <returns>true to indicate the error was handled, false to indicate it is unhandled</returns>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.RetrieveCachedValue(FluentCache.CachedValue{`0})">
            <summary>
            Retrieves the value if it is not in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.RetrieveCachedValueAsync(FluentCache.CachedValue{`0})">
            <summary>
            Asynchronously retrieves the value if it is not in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.ValidateCachedValue(FluentCache.CachedValue{`0})">
            <summary>
            Validates the cached value
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.ValidateCachedValueAsync(FluentCache.CachedValue{`0})">
            <summary>
            Asynchronously validates the cached value
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.Execute">
            <summary>
            Executes the plan
            </summary>
        </member>
        <member name="M:FluentCache.CacheExecutionPlan`1.ExecuteAsync">
            <summary>
            Asynchronously executes the plan
            </summary>
        </member>
        <member name="P:FluentCache.CacheExecutionPlan`1.Key">
            <summary>
            Gets the Key that will be used in combination with the Region to retrieve the value from the cache
            </summary>
        </member>
        <member name="P:FluentCache.CacheExecutionPlan`1.Region">
            <summary>
            Gets the Region that will be used in combination with the Key to retrieve the value from the cache
            </summary>
        </member>
        <member name="P:FluentCache.CacheExecutionPlan`1.Cache">
            <summary>
            Gets the cache that will be used to retrieve the value
            </summary>
        </member>
        <member name="P:FluentCache.CacheExecutionPlan`1.Expiration">
            <summary>
            Gets the expiration policy
            </summary>
        </member>
        <member name="T:FluentCache.CacheOperation">
            <summary>
            Defines a list of caching operations
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Get">
            <summary>
            Getting a value from the cache
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Set">
            <summary>
            Setting a value in the cache
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.Remove">
            <summary>
            Removing a value from the cache
            </summary>
        </member>
        <member name="F:FluentCache.CacheOperation.MarkValidated">
            <summary>
            Marking a value in the cache as validated
            </summary>
        </member>
        <member name="T:FluentCache.Simple.FluentDictionaryCache">
            <summary>
            A simple Cache implementation that uses Dictionary to cache values
            </summary>
        </member>
        <member name="T:FluentCache.Cache">
            <summary>
            Represents a cache that can be used to store and retrieve values
            </summary>
        </member>
        <member name="M:FluentCache.Cache.Get``1(System.String,System.String)">
            <summary>
            Gets a value from the cache
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="region">The region in the cache where the key is stored</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Cache.Set``1(System.String,System.String,``0,FluentCache.CacheExpiration)">
            <summary>
            Sets a value in the cache
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="region">The region in the cache where the key is stored</param>
            <param name="value">The cached value</param>
            <param name="cacheExpiration">The expiration policy for this value</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Cache.Remove(System.String,System.String)">
            <summary>
            Removes a value from the cache
            </summary>
        </member>
        <member name="M:FluentCache.Cache.MarkAsValidated(System.String,System.String)">
            <summary>
            Marks a value in the cache as validated
            </summary>
        </member>
        <member name="M:FluentCache.Cache.GetParameterCacheKeyValue(System.Object)">
            <summary>
            Gets a string representation of a parameter value that is used to build up a unique cache key for a parametized caching expression. The default implementation is parameterValue.ToString()
            </summary>
        </member>
        <member name="M:FluentCache.Cache.GetCacheKey(System.String,System.String)">
            <summary>
            Combines the key and region to generate a unique cache key
            </summary>
        </member>
        <member name="M:FluentCache.Cache.CreateExecutionPlan``1(FluentCache.ICacheStrategy{``0})">
            <summary>
            Creates an execution plan for the specified caching strategy
            </summary>
        </member>
        <member name="M:FluentCache.Simple.FluentDictionaryCache.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.Simple.FluentDictionaryCache.Get``1(System.String,System.String)">
            <summary>
            Gets the specified cached value
            </summary>
        </member>
        <member name="M:FluentCache.Simple.FluentDictionaryCache.Set``1(System.String,System.String,``0,FluentCache.CacheExpiration)">
            <summary>
            Sets the specified cached value
            </summary>
        </member>
        <member name="M:FluentCache.Simple.FluentDictionaryCache.Remove(System.String,System.String)">
            <summary>
            Removes the specified cached value
            </summary>
        </member>
        <member name="M:FluentCache.Simple.FluentDictionaryCache.MarkAsValidated(System.String,System.String)">
            <summary>
            Marks the specified cached value as validated
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.BulkCacheStrategy`2">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.BulkCacheStrategyIncomplete`2">
            <summary>
            An incomplete strategy to access or modify a batch of strongly-typed data in a Cache
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategy">
            <summary>
            A strategy to access or update data in a cache
            </summary>
        </member>
        <member name="P:FluentCache.Strategies.CacheStrategy.Region">
            <summary>
            Gets the Region that this caching policy will use when caching items
            </summary>
        </member>
        <member name="P:FluentCache.Strategies.CacheStrategy.Expiration">
            <summary>
            Gets the Expiration that this caching policy will use when caching items
            </summary>
        </member>
        <member name="P:FluentCache.Strategies.CacheStrategy.Key">
            <summary>
            Gets the Key that this caching policy will using when caching items
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.WithParameters(System.Object[])">
            <summary>
            Updates the cache strategy to include parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.RetrieveUsing(System.Func{System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            Updates the cache strategy to use the specified method to retrieve missing or invalid items in the batch
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.RetrieveUsingAsync(System.Func{System.Collections.Generic.ICollection{`0},System.Threading.Tasks.Task{System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}}})">
            <summary>
            Updates the cache strategy to use the specified async method to retrieve missing or invalid items in the batch
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.ClearValues">
            <summary>
            Clears all values in the batch
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.SetValue(`0,`1)">
            <summary>
            Sets the specified value in the cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyIncomplete`2.SetValues(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Sets the specified values in the cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategy`2.Validate(System.Func{FluentCache.CachedValue{`1},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategy`2.InvalidateIf(System.Func{FluentCache.CachedValue{`1},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategy`2.GetAll">
            <summary>
            Gets all cached items
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategy`2.GetAllValues">
            <summary>
            Gets all cached values
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.BulkCacheStrategyAsync`2">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.ValidateAsync(System.Func{FluentCache.CachedValue{`1},System.Threading.Tasks.Task{FluentCache.CacheValidationResult}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.InvalidateIfAsync(System.Func{FluentCache.CachedValue{`1},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns false
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.Validate(System.Func{FluentCache.CachedValue{`1},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.InvalidateIf(System.Func{FluentCache.CachedValue{`1},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.GetAllAsync">
            <summary>
            Asynchronously gets all cached results
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.BulkCacheStrategyAsync`2.GetAllValuesAsync">
            <summary>
            Asynchronously gets all cached values
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyAsync`1">
            <summary>
            A strategy to asynchronously access or modify strongly-typed data in a Cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FluentCache.Strategies.SingleValueCacheStrategy">
            <summary>
            A strategy to access or update a single value in a cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.SingleValueCacheStrategy.ClearValue">
            <summary>
            Clears the value associated with this caching strategy from the cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.GetAsync">
            <summary>
            Asynchronously gets the cached value wrapper from the cache
            </summary>
            <returns>A task containing the cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.InvalidateIf(System.Func{FluentCache.CachedValue{`0},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.InvalidateIfAsync(System.Func{FluentCache.CachedValue{`0},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns false
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.ValidateAsync(System.Func{FluentCache.CachedValue{`0},System.Threading.Tasks.Task{FluentCache.CacheValidationResult}})">
            <summary>
            Invalidates the cached value if the specified asynchronous validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">An asynchronous delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.Validate(System.Func{FluentCache.CachedValue{`0},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.RetrieveUsingAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.IfRetrievalFails(System.Func{System.Exception,FluentCache.CachedValue{`0},FluentCache.RetrievalErrorHandlerResult{`0}})">
            <summary>
            Specifies an error handling strategy if retrieval fails
            </summary>
            <param name="errorHandler">An error handler that takes the exception and previous cached value (if it exists) and returns the fallback value</param>
            <returns>An updated cache strategy that includes the retrieval error handler strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.GetValueAsync">
            <summary>
            Asynchronously gets the cached value
            </summary>
            <returns>A task containing the cached value</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyAsync`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="T:FluentCache.Expressions.InvalidCachingExpressionException">
            <summary>
            An exception that is thrown when the fluent caching API is unable to parse the provided expression
            </summary>
        </member>
        <member name="T:FluentCache.FluentCacheException">
            <summary>
            The base for exceptions thrown by the FluentCache APIs
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor(System.String,FluentCache.CacheOperation,System.Exception)">
            <summary>
            Constructs a new instance with the specified message, operation, and inner exception
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor(System.String)">
            <summary>
            Constructs a new instance with the specified message
            </summary>
        </member>
        <member name="M:FluentCache.FluentCacheException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance with the specified message and inner exception
            </summary>
        </member>
        <member name="P:FluentCache.FluentCacheException.Operation">
            <summary>
            Specifies which caching operation failed
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor(System.String)">
            <summary>
            Constructs a new instance with the specified message
            </summary>
        </member>
        <member name="M:FluentCache.Expressions.InvalidCachingExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance with the specified message and inner exception
            </summary>
        </member>
        <member name="T:FluentCache.RetrievalErrorHandlerResult`1">
            <summary>
            Defines the result of a retrieval error handler
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FluentCache.RetrievalErrorHandlerResult`1.UsePreviousCachedValue(System.Exception,FluentCache.CachedValue{`0})">
            <summary>
            A simple retrieval error handler that uses the previous cached value, if it exists
            </summary>
        </member>
        <member name="M:FluentCache.RetrievalErrorHandlerResult`1.UsePreviousCachedValueOrDefault(System.Exception,FluentCache.CachedValue{`0},`0)">
            <summary>
            A simple retrieval error handler that uses the previous cached value if it exists, otherwise uses a default value
            </summary>
        </member>
        <member name="P:FluentCache.RetrievalErrorHandlerResult`1.IsErrorHandled">
            <summary>
            Indicates whether the retrieval error was handled
            </summary>
        </member>
        <member name="P:FluentCache.RetrievalErrorHandlerResult`1.FallbackResult">
            <summary>
            Specifies the fallback value that should be used
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyParameterized`1">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyIncomplete">
            <summary>
            An incomplete strategy to access or modify strongly-typed data in a Cache
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.Retrieve``1(System.Func{``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.RetrieveUsing``1(System.Func{``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.RetrieveUsingAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.Get``1">
            <summary>
            Gets the cached value wrapper from the cache
            </summary>
            <returns>The cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.GetValue``1">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.WithParameters``1(``0)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.WithParameters``2(``0,``1)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.WithParameters``3(``0,``1,``2)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.WithParameters``4(``0,``1,``2,``3)">
            <summary>
            Updates the cache strategy to include strongly typed parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyIncomplete.WithParameters(System.Object[])">
            <summary>
            Updates the cache strategy to include parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`1.RetrieveUsing``1(System.Func{`0,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`1.RetrieveUsingAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyParameterized`2">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`2.Retrieve``1(System.Func{`0,`1,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`2.RetrieveAsync``1(System.Func{`0,`1,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyParameterized`3">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`3.RetrieveUsing``1(System.Func{`0,`1,`2,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`3.RetrieveUsingAsync``1(System.Func{`0,`1,`2,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategyParameterized`4">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache that depends on one or more parameters
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`4.RetrieveUsing``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategyParameterized`4.RetrieveUsingAsync``1(System.Func{`0,`1,`2,`3,System.Threading.Tasks.Task{``0}})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">An asynchronous delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="T:FluentCache.Strategies.CacheStrategy`1">
            <summary>
            A strategy to access or modify strongly-typed data in a Cache
            </summary>
            <typeparam name="T">The type of the data in the Cache</typeparam>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.Get">
            <summary>
            Gets the cached value wrapper from the cache
            </summary>
            <returns>The cached value wrapper</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.InvalidateIf(System.Func{FluentCache.CachedValue{`0},System.Boolean})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns false
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.Validate(System.Func{FluentCache.CachedValue{`0},FluentCache.CacheValidationResult})">
            <summary>
            Invalidates the cached value if the specified validation delegate returns CacheValidationResult.Invalid
            </summary>
            <param name="validate">A delegate that validates the cached value</param>
            <returns>An updated cache strategy that includes the invalidation strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.RetrieveUsing(System.Func{`0})">
            <summary>
            Specifies a data retrieval strategy if the desired value does not exist in the cache or is invalid
            </summary>
            <param name="retrieve">A delegate that specifies how the value is to be retrieved</param>
            <returns>An updated cache strategy that includes the retrieval strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.IfRetrievalFails(System.Func{System.Exception,FluentCache.CachedValue{`0},FluentCache.RetrievalErrorHandlerResult{`0}})">
            <summary>
            Specifies an error handling strategy if retrieval fails
            </summary>
            <param name="errorHandler">An error handler that takes the exception and previous cached value (if it exists) and returns the fallback value</param>
            <returns>An updated cache strategy that includes the retrieval error handler strategy</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Strategies.CacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="T:FluentCache.CacheExtensions">
            <summary>
            Fluent Cache Extensions
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.GetValue``1(FluentCache.Cache,System.String,System.String)">
            <summary>
            Gets the specified value from a cache, or the default value if no matching item was found in the cache
            </summary>
            <typeparam name="T">The cached item type</typeparam>
            <param name="source">the cache</param>
            <param name="key">the key of the cached item</param>
            <param name="region">the region for the cache</param>
            <returns>The cached value, or default(T) if the item is not in the cache</returns>
        </member>
        <member name="M:FluentCache.CacheExtensions.ThisMethod(FluentCache.Cache,System.String)">
            <summary>
            Returns a caching strategy for the calling method. The method name will be used in the cache key
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ThisMethod``1(FluentCache.Cache{``0},System.String)">
            <summary>
            Returns a caching strategy for the calling method. The method name and source type will be used in the cache key
            </summary>
            <typeparam name="TSource">The type of the caching source</typeparam>
            <param name="source">The caching source</param>
            <param name="method">The name of the method that will be cached</param>
            <returns></returns>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithSource``1(FluentCache.Cache,``0)">
            <summary>
            Returns a cache wrapper that can support caching strategies for member expressions
            ex: cache.WithSource(this).Method(t => t.MyMethod())
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithKey(FluentCache.Cache,System.String)">
            <summary>
            Returns a caching strategy with the specified key
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.WithRegion``1(``0,System.String)">
            <summary>
            Updates a caching strategy to use the specified region
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ExpireAfter``1(``0,System.TimeSpan)">
            <summary>
            Updates a caching strategy to use the specified sliding absolute expiration date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``1(FluentCache.Strategies.CacheStrategy{``0},System.DateTime)">
            <summary>
            Validates the item was cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.ValidateCachedAfter``1(FluentCache.Strategies.CacheStrategyAsync{``0},System.DateTime)">
            <summary>
            Validates the item was cached after the specified date
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValue``1(FluentCache.Strategies.CacheStrategy{``0})">
            <summary>
            Use the previous cached value if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValueOrDefault``1(FluentCache.Strategies.CacheStrategy{``0},``0)">
            <summary>
            Use the previous cached value (or a default value if there is no previous value) if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValue``1(FluentCache.Strategies.CacheStrategyAsync{``0})">
            <summary>
            Use the previous cached value if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.IfRetrievalFailsUsePreviousValueOrDefault``1(FluentCache.Strategies.CacheStrategyAsync{``0},``0)">
            <summary>
            Use the previous cached value (or a default value if there is no previous value) if the retrieval mechanism failed
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``2(FluentCache.Cache{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``2(FluentCache.Cache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Returns an async caching strategy for the specified method. The cache source type and method name will be used for the cache key and the method will be used as the retrieval mechanism if the item is not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``3(FluentCache.Cache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}})">
            <summary>
            Returns a caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="M:FluentCache.CacheExtensions.Method``3(FluentCache.Cache{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``1,``2}}}}})">
            <summary>
            Returns an async caching strategy that cached individual items returned from the method by their specified key. The cache source type, method name, and item key will be used for the cache key and the method will be used as the retrieval mechanism for items not found in the cache
            </summary>
        </member>
        <member name="T:FluentCache.CacheValidationResult">
            <summary>
            Defines possible outcomes when determining whether or not a cached value is still valid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Valid">
            <summary>
            The cached value was determined to still be valid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Invalid">
            <summary>
            The cached value was determined to be invalid
            </summary>
        </member>
        <member name="F:FluentCache.CacheValidationResult.Unknown">
            <summary>
            The cached value was not validated and it is unknown whether or not the value is valid or invalid
            </summary>
        </member>
        <member name="T:FluentCache.Cache`1">
            <summary>
            A cache for a particular source whose methods you want to cache. Various Fluent extension methods simplify the process
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="M:FluentCache.Cache`1.#ctor(`0,FluentCache.Cache)">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:FluentCache.Cache`1.Get``1(System.String,System.String)">
            <summary>
            Gets a value from the cache
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="region">The region in the cache where the key is stored</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Cache`1.Set``1(System.String,System.String,``0,FluentCache.CacheExpiration)">
            <summary>
            Sets a value in the cache
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="region">The region in the cache where the key is stored</param>
            <param name="value">The cached value</param>
            <param name="cacheExpiration">The expiration policy for this value</param>
            <returns>The cached value</returns>
        </member>
        <member name="M:FluentCache.Cache`1.Remove(System.String,System.String)">
            <summary>
            Removes a value from the cache
            </summary>
        </member>
        <member name="M:FluentCache.Cache`1.GetCacheKey(System.String,System.String)">
            <summary>
            Combines the key and region to generate a unique cache key
            </summary>
        </member>
        <member name="M:FluentCache.Cache`1.GetParameterCacheKeyValue(System.Object)">
            <summary>
            Gets a string representation of a parameter value that is used to build up a unique cache key for a parametized caching expression. The default implementation is parameterValue.ToString()
            </summary>
        </member>
        <member name="M:FluentCache.Cache`1.MarkAsValidated(System.String,System.String)">
            <summary>
            Marks a value in the cache as validated
            </summary>
        </member>
        <member name="P:FluentCache.Cache`1.Source">
            <summary>
            Gets the source whose methods you want to cache
            </summary>
        </member>
        <member name="T:FluentCache.Strategies.MethodCacheStrategy`1">
            <summary>
            Defines a caching strategy for a particular method
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.MethodCacheStrategy`1.RetrieveUsingMethod">
            <summary>
            Indicates that the method used to create the caching strategy should also be used to retrieve the value if it is missing or invalid
            </summary>
            <returns>A caching strategy that can be used to access the value</returns>
        </member>
        <member name="M:FluentCache.Strategies.MethodCacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="M:FluentCache.Strategies.MethodCacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="T:FluentCache.Strategies.AsyncMethodCacheStrategy`1">
            <summary>
            Defines an asynchronous caching strategy for a particular method
            </summary>
        </member>
        <member name="M:FluentCache.Strategies.AsyncMethodCacheStrategy`1.RetrieveUsingMethod">
            <summary>
            Indicates that the method used to create the caching strategy should also be used to retrieve the value if it is missing or invalid
            </summary>
            <returns>A caching strategy that can be used to access the value</returns>
        </member>
        <member name="M:FluentCache.Strategies.AsyncMethodCacheStrategy`1.SetValue(`0)">
            <summary>
            Sets the cached value
            </summary>
            <param name="value">The value to be cached</param>
        </member>
        <member name="M:FluentCache.Strategies.AsyncMethodCacheStrategy`1.GetValue">
            <summary>
            Gets the cached value
            </summary>
            <returns>The cached value</returns>
        </member>
        <member name="T:FluentCache.Parameter">
            <summary>
            Methods to configure how the fluent caching API handles parameters
            </summary>
        </member>
        <member name="M:FluentCache.Parameter.DoNotCache``1">
            <summary>
            Informs the fluent caching API that the specified parameter should not be included when determining the cache key
            </summary>
        </member>
        <member name="M:FluentCache.Parameter.DoNotCache``1(``0)">
            <summary>
            Informs the fluent caching API that the specified parameter should not be included when determining the cache key. Use the value parameter if a value is needed for data retrieval
            </summary>
        </member>
    </members>
</doc>
